# Auth Rate Limit Edge Function Overview

## Purpose
The auth-rate-limit edge function provides rate limiting protection for authentication endpoints to prevent brute force attacks and abuse. It tracks authentication attempts by IP address and implements progressive lockout mechanisms.

## Main Functionality

### 1. Rate Limiting
- **Attempt Tracking**: Monitors authentication attempts per IP address
- **Time Windows**: Implements sliding time windows for attempt counting
- **Progressive Lockout**: Applies lockout periods after maximum attempts
- **Automatic Reset**: Resets counters after lockout periods expire

### 2. Security Protection
- **Brute Force Prevention**: Prevents systematic password guessing attacks
- **IP-Based Tracking**: Tracks attempts by client IP address
- **Configurable Limits**: Adjustable attempt limits and lockout durations
- **Fail-Open Policy**: Allows requests if rate limiting fails

### 3. Database Storage
- **Persistent Tracking**: Stores rate limit data in Supabase database
- **Cross-Instance Coordination**: Works across multiple function instances
- **Data Cleanup**: Automatic cleanup of old rate limit records
- **Audit Trail**: Maintains history of rate limit events

## Technical Architecture

### IP Detection
- **Proxy Support**: Handles requests behind proxies and load balancers
- **Header Priority**: Checks x-forwarded-for, x-real-ip, and fallback headers
- **IP Validation**: Validates IP address format and range
- **Fallback Handling**: Uses "unknown" for unidentifiable IPs

### Rate Limit Logic
- **Sliding Windows**: Uses time-based windows for attempt counting
- **Lockout Management**: Implements progressive lockout periods
- **Reset Mechanisms**: Automatic reset after lockout expiration
- **State Management**: Maintains attempt counts and lockout status

### Database Integration
- **Supabase Integration**: Uses Supabase for persistent storage
- **Service Role Access**: Uses service role key for database operations
- **Error Handling**: Graceful handling of database failures
- **Data Consistency**: Ensures consistent rate limit state

## Configuration

### Rate Limit Settings
- **Max Attempts**: 5 attempts per time window (configurable)
- **Time Window**: 15 minutes for attempt counting (configurable)
- **Lockout Duration**: 30 minutes after max attempts (configurable)
- **Fail-Open**: Allows requests if rate limiting fails

### Database Schema
- **IP Address**: Client IP address for tracking
- **Attempt Count**: Number of attempts in current window
- **First Attempt**: Timestamp of first attempt in window
- **Lockout Status**: Whether IP is currently locked out
- **Lockout Until**: Timestamp when lockout expires

## API Endpoints

### Check Rate Limit
- **Action**: "check"
- **Purpose**: Check if IP is currently rate limited
- **Response**: Allowed/blocked status with message

### Record Attempt
- **Action**: "record"
- **Purpose**: Record an authentication attempt
- **Response**: Success confirmation

## Error Handling
- **Database Failures**: Graceful handling of database errors
- **Invalid Requests**: Proper validation of request parameters
- **Missing Data**: Fallback handling for missing IP addresses
- **Fail-Open Policy**: Allows requests if rate limiting fails

## Security Features
- **IP Validation**: Validates IP address format and range
- **Proxy Support**: Handles requests behind proxies correctly
- **Data Sanitization**: Sanitizes input data to prevent injection
- **Audit Logging**: Logs rate limit events for monitoring

## Performance
- **Efficient Queries**: Optimized database queries for rate limit checks
- **Memory Management**: Minimal memory usage with cleanup
- **Fast Response**: Quick response times for rate limit checks
- **Scalable Design**: Works across multiple function instances
